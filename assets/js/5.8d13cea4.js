(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{214:function(e,t,a){e.exports=a.p+"assets/img/gear.6e09bae1.png"},215:function(e,t,a){e.exports=a.p+"assets/img/control.04a0ab40.png"},216:function(e,t,a){e.exports=a.p+"assets/img/data.41212a8a.png"},217:function(e,t,a){e.exports=a.p+"assets/img/subsampling.f5d985ad.png"},218:function(e,t,a){e.exports=a.p+"assets/img/windowing.06b38b7c.png"},219:function(e,t,a){e.exports=a.p+"assets/img/gadf.597d049f.png"},220:function(e,t,a){e.exports=a.p+"assets/img/cnn.45685417.png"},221:function(e,t,a){e.exports=a.p+"assets/img/cnn-skip.bfd9f5d8.png"},222:function(e,t,a){e.exports=a.p+"assets/img/fnn.17ff0706.png"},223:function(e,t,a){e.exports=a.p+"assets/img/rcnn.068487cd.png"},250:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("Hero"),e._v(" "),r("h2",{attrs:{id:"summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),r("p",[e._v("This project log documents building a system to allow a user to fly a virtual racing drone using their thoughts via an EEG headset. To accomplish this, a regression neural network is trained to take recordings of the user flying a drone using a flight controller while wearing an EEG headset.")]),e._v(" "),r("h3",{attrs:{id:"current-status"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#current-status"}},[e._v("#")]),e._v(" Current Status")]),e._v(" "),r("p",[r("strong",[e._v("This project is still a work in progress")]),e._v(". The end goal of flying by thought is has not yet been achieved. However, the full recording, training and playback pipeline is in place and the networks show that they are learning and even some simple responsiveness has been observed during network playback.")]),e._v(" "),r("h3",{attrs:{id:"future-work"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-work"}},[e._v("#")]),e._v(" Future Work")]),e._v(" "),r("p",[e._v("As noted above, while incomplete, the project is currently in a stable enough pipeline state, which means the whole pipeline can be tested and incrementally improved based on findings. Future work includes improving and decoupling parts of the recording pipeline, experimenting with network architectures and improving performance, especially the playback rate.")]),e._v(" "),r("h2",{attrs:{id:"goal"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#goal"}},[e._v("#")]),e._v(" Goal")]),e._v(" "),r("p",[e._v("The goal of this project is to build a system to allow users to fly a simulated drone via thought. This process is split into two steps of deep learning and deep reinforcement learning. The first step to build a regression network that is trained on recorded flights and can allow for basic control of drones. The second step is to take this trained network and set it as the starting point for a deep reinforcement learning algorithm where the user trains the algorithm actively/with online training.")]),e._v(" "),r("h2",{attrs:{id:"theory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#theory"}},[e._v("#")]),e._v(" Theory")]),e._v(" "),r("p",[e._v("The central question is whether current prosumer technologies can be used to build a brain computer interface sensitive and responsive enough to perform a task as complicated as flying a high speed racing drone. While the fields of neuroscience and machine learning are immense, the project pulls from a handful of key pieces of research with the hopes that a network can be trained to handle the finer details.")]),e._v(" "),r("h2",{attrs:{id:"challenges"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#challenges"}},[e._v("#")]),e._v(" Challenges")]),e._v(" "),r("p",[e._v("There are many challenges when it comes to the topic of whether this project is feasible at all. The two that are most prevalent are the network training technique and the data acquisition methods.")]),e._v(" "),r("h3",{attrs:{id:"feasibility"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#feasibility"}},[e._v("#")]),e._v(" Feasibility")]),e._v(" "),r("p",[e._v("The core unanswered question of this project is whether it is possible at all to build such a system with the current hardware and software constraints.")]),e._v(" "),r("p",[e._v("Firstly, EEG headsets only collect approximate data, even one as sensitive as OpenBCI. For example, an invasive electrode implanted in the brain can collect as fine of a reading as a single neuron because it is directly implanted onto the brain in direct contact with the neurons. An EEG headset however sits several centimeters away from it's source and collects the combined activation of thousands, possibly millions, of neurons. While this is useful for seeing the activity of for different regions of neurons (i.e. visual cortex lights up when it sees a red circle on the screen), it likely isn't enough to sense intent of drone flight at high speeds. There is research being done into potential solution to this issue that doesn't require invasive surgery. Some research has shown that it may be possible to bypass the brain and collect data from the spinal column. The spinal column and the lower motor neurons are the bodies natural outputs designed to generate signals meant to be translated into actions. Additionally, through methods like EMG, it is possible to get very close to the nerves and neurons via skin contact electrodes than is possible directly on the skull. Further investigation of this is required.")]),e._v(" "),r("p",[e._v("Another issue is that thinking about performing an action produces different brain activity than actually performing that action (and consequentially, thinking about thinking of an action yet again produces different activity). Currently these networks are being trained currently on recordings of a user flying a drone with a controller in which they are producing real physical actuation to control the drone. However, to test the trained networks, the user has to attempt to fly it with only their thoughts. It is currently unclear whether this disparity can be overcome by the current training pipeline (or possibly for that matter, any pipeline where the training and test environments differ in this way). Overcoming this challenge remains an open question but one consideration is to bring in reinforcement learning earlier into the process. The key challenge there is that reinforcement learning has the cold start issue - as many as the first several hundred iterations can be random while the algorithm learns the basics of the environment. No human can sit through that training process of random activity.")]),e._v(" "),r("h3",{attrs:{id:"technical"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#technical"}},[e._v("#")]),e._v(" Technical")]),e._v(" "),r("p",[r("strong",[e._v("Data Collection")]),e._v(": This project generates data from several locations, including the EEG headset, controller and screen. This pieces of information are highly correlated - when a wall comes up on the screen, the user uses see the information on the screen and the EEG headset receives neural activity from the brain. These signals come from different devices generated in a unsynchronized streams that must be lined up and recorded together to represent a sample. In Python, the Global Interpreter Lock prevents the a program from achieving in-process parallelization and requires "),r("code",[e._v("multiprocessing")]),e._v(" which has added overhead and code complexity. Currently "),r("code",[e._v("PyLSL")]),e._v(" is being used to handle this task but is not meant to act as a production library. Further works remains in this area.")]),e._v(" "),r("p",[r("strong",[e._v("Responsiveness")]),e._v(': racing drones fly at incredible speeds; for the purposes of this project the simulated drone was adjusted to allow it to fly at a slower speed but in many cases the drone still topped out at 60+ KPH. In addition to this, drones are incredibly sensitive to input. Most drones have software to dampen and scale input from the user before it even gets to the motors. This is used by professional drone racings to do amazing maneuvers, turns, flips and tricks. However, this same responsiveness is a challenge for flight by mind for two reasons: first, if the rate of predictions is not high enough then the network will not be making predictions fast enough to respond to the state of the drone. If a drone is approaching a wall at high speed but predictions only happen once or twice a second, it will not have enough time to react, even if the predictions are perfect. Secondly, predictions must not have a lot of jitter. If predictions vary wildly from prediction to prediction, then the drone will also respond unpredictability and possibly cause a negative feedback loop compounding errors. Combined, this means that predictions need to be made "realtime" (the minimum threshold for this project has been decided as 30 Hz, though 60 Hz is the ideal) but also have very little jitter.')]),e._v(" "),r("h2",{attrs:{id:"hardware-and-software-components"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hardware-and-software-components"}},[e._v("#")]),e._v(" Hardware and Software Components")]),e._v(" "),r("p",[e._v("The following section discusses the preexisting components of the pipeline that were purchased or otherwise integrated in to the design.")]),e._v(" "),r("p",[r("img",{attrs:{src:a(214),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"simulator-liftoff"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#simulator-liftoff"}},[e._v("#")]),e._v(" Simulator - Liftoff")]),e._v(" "),r("p",[e._v("The first step in the process was to pick a drone simulator. The two key deciding factors were the quality of simulation, including physics but also other aspects such as virtual drone configuration, flight controller settings, etc. and Linux support. "),r("a",{attrs:{href:"https://store.steampowered.com/app/410340/Liftoff_FPV_Drone_Racing/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Liftoff"),r("OutboundLink")],1),e._v(' was chosen for this project as it met these requirements. The Vortex Pro 250 was chosen as the drone for all recordings as it is a common frame for racing drones among beginners and offers a good balance of speed and control. The stock drone was unmodified expect for changing the camera angle to 20 degrees to allow for slower flight while keeping the horizon in view and setting the Flight Controller to "Freestyle Smooth". Additionally, the game options were set to the maximum settings (minus Bloom and Shadows, which caused stutter within Liftoff) with a framerate limit of 60fps. Finally, the On Screen Display (OSD) was enabled, which shows the horizon line, speed and altitude, which is expected to give some additional information about the orientation and the world to the model.')]),e._v(" "),r("h3",{attrs:{id:"eeg-openbci-ultracortex"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eeg-openbci-ultracortex"}},[e._v("#")]),e._v(" EEG - OpenBCI UltraCortex")]),e._v(" "),r("p",[e._v("The OpenBCI "),r("a",{attrs:{href:"https://shop.openbci.com/collections/frontpage/products/ultracortex-mark-iv",target:"_blank",rel:"noopener noreferrer"}},[e._v("UltraCortex Mark IV"),r("OutboundLink")],1),e._v(" with 8 channel "),r("a",{attrs:{href:"https://shop.openbci.com/collections/frontpage/products/cyton-biosensing-board-8-channel?variant=38958638542",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cyton"),r("OutboundLink")],1),e._v(" board and "),r("a",{attrs:{href:"https://shop.openbci.com/collections/frontpage/products/5-mm-spike-electrode-pack-of-30?variant=8120433606670",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dry Comb Electrodes"),r("OutboundLink")],1),e._v(" was chosen for its high quality sensing capabilities as well as for it's (relatively) low cost.")]),e._v(" "),r("h3",{attrs:{id:"controller-fatshark-controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#controller-fatshark-controller"}},[e._v("#")]),e._v(" Controller - FatShark Controller")]),e._v(" "),r("p",[e._v("In order to fly the simulated drone accurately and to train the network on realistic output, the "),r("a",{attrs:{href:"https://www.amazon.com/gp/product/B079C52D69/",target:"_blank",rel:"noopener noreferrer"}},[e._v("FatShark Controller"),r("OutboundLink")],1),e._v(" was chosen as a low cost option for a real drone controller with USB joystick interface. The FatShark controller work natively with both Liftoff and Linux and was interfaced with "),r("code",[e._v("python-evdev")]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"software"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#software"}},[e._v("#")]),e._v(" Software")]),e._v(" "),r("p",[e._v("A variety of libraries were used to bring this project together. These are some of the more notable ones, whose usage is described below.")]),e._v(" "),r("ul",[r("li",[e._v("Deep Learning: FastAI and PyTorch")]),e._v(" "),r("li",[e._v("EEG Encoding: PyTS (Gramian Angular Fields)")]),e._v(" "),r("li",[e._v("Screen Capture: MSS")]),e._v(" "),r("li",[e._v("Data Handling: PyLSL, PyLMDB, Pandas, Numpy")]),e._v(" "),r("li",[e._v("Controller Capture and Emulation: python-evdev")])]),e._v(" "),r("h3",{attrs:{id:"compute"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#compute"}},[e._v("#")]),e._v(" Compute")]),e._v(" "),r("ul",[r("li",[e._v("Recording Rig: MSI P65 Creator with NVIDIA GTX 1060 MQ and screen resolution set to 720p")]),e._v(" "),r("li",[e._v("Training Rig: Self built rig, VM with PCI passthrough with NVIDIA GTX 2070 with 8GB of RAM, Intel CPU with 6 Cores and 24 gigs of RAM.")])]),e._v(" "),r("h2",{attrs:{id:"pipeline"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pipeline"}},[e._v("#")]),e._v(" Pipeline")]),e._v(" "),r("p",[e._v("The pipeline consists of three components, the hardware which includes EEG headset, controller and laptop running the simulator, the Python application responsible for data collection and model playback and the data processing and training done in Jupyter notebooks.")]),e._v(" "),r("p",[r("img",{attrs:{src:a(215),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"recording-and-playback"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recording-and-playback"}},[e._v("#")]),e._v(" Recording and Playback")]),e._v(" "),r("p",[e._v("The recording of data and playback of trained models is done with a Python application. Python was chosen because of ease of importing a PyTorch model trained in Python, but Python is not the ideal choice for such a tool due to the high frequency requirements. A single process is unable to screen capture, save the image, get EEG data from OpenBCI, get input state from controller and also make a prediction at anything more than 5 Hz.")]),e._v(" "),r("p",[e._v("As such, the application had to be designed around "),r("code",[e._v("multiprocessing")]),e._v(" and "),r("code",[e._v("pyLSL")]),e._v(". Multiprocessing was used to split up each component into it's own process, with LSL as the communication layer between them. Before LSL was introduced, multiprocessing constructs such as "),r("code",[e._v("multiprocessing.Value")]),e._v(",  "),r("code",[e._v("multiprocessing.Array")]),e._v(" and "),r("code",[e._v("multiprocessing.Queue")]),e._v(" were first attempted but they each had their own issues and were ultimate too slow due to lock contention between the processes running at different frequencies. Additionally, LSL provides a timestamp that can be used to synchronize disjointed data.")]),e._v(" "),r("p",[e._v("This final architecture allowed BCI and Controller data to be sampled at 240 Hz and screen frames to be sampled at 720p@30 Hz (it was not possible to push screen capture beyond this via MSS and Python and maintain a steady frame rate). Playback however is limited to a max of 40 Hz, which is mainly due to the amount of time it takes to make a prediction - GPU predictions are significantly faster than CPU predictions, however, the simulator also uses the GPU so while Playback is running. Because both network predictions and game rendering are happening on the GPU, this ultimately limits the frequency to 40 Hz with screen image or about 60 Hz without.")]),e._v(" "),r("h4",{attrs:{id:"controller-sampler-emulator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#controller-sampler-emulator"}},[e._v("#")]),e._v(" Controller Sampler/Emulator")]),e._v(" "),r("p",[e._v("The controller process has two functions: 1) to read events from the controller via "),r("code",[e._v("evdev")]),e._v(", storing those events as controller state and 2) replicating those events an emulated controller via "),r("code",[e._v("uinput")]),e._v(", both of which are done using the "),r("a",{attrs:{href:"https://python-evdev.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("python-evdev"),r("OutboundLink")],1),e._v(" library. This emulation is done so that during playback, the controller can be driven by the predictions of the network and passed along to the game without the real controller. The FatShark controller produces input on all axis between 21 and 232, so all input is scaled between 0 and 1 when recorded and scaled back by multiplying against 211 (232 - 21) when being played back. This creates a smooth value, for example where 50% represents moving the stick halfway.")]),e._v(" "),r("h4",{attrs:{id:"eeg-sampler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eeg-sampler"}},[e._v("#")]),e._v(" EEG Sampler")]),e._v(" "),r("p",[e._v("EEG sampling is done via OpenBCI's Python library "),r("a",{attrs:{href:"https://github.com/OpenBCI/OpenBCI_Python",target:"_blank",rel:"noopener noreferrer"}},[e._v("openbci-python"),r("OutboundLink")],1),e._v(". The usage is simply as the example provided by OpenBCI, by calling "),r("code",[e._v("board.start_stream()")]),e._v(". Data read is placed into an LSL stream, which both the recording and playback functionality read from.")]),e._v(" "),r("h4",{attrs:{id:"screen-sampler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#screen-sampler"}},[e._v("#")]),e._v(" Screen Sampler")]),e._v(" "),r("p",[e._v("Screen sampling is done via the "),r("a",{attrs:{href:"https://python-mss.readthedocs.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("MSS"),r("OutboundLink")],1),e._v(" library which handles efficiently taking images of the screen. The screen is captured at 1280x720p, converted from MSS's format to PIL using "),r("code",[e._v("Image.frombytes")]),e._v(" then downscaled to 100x100 using "),r("code",[e._v("PIL.Image.LANCZOS")]),e._v(" (it was noted that "),r("code",[e._v("PIL.Image.NEAREST")]),e._v(" caused too much degredation of the image). Even with it's size reduced, at full speed this process generates a lot of data which makes it difficult to make it available to the recorder process in time. Writing the image to disk is one option, however PNGs take too long to write resulting in a lower frame rate and while JPGs can be written out quickly, they had a noticeable loss in quality and artifacting. Instead, the image is saved in byte form using "),r("code",[e._v("pil.tobytes()")]),e._v(" into an "),r("a",{attrs:{href:"https://lmdb.readthedocs.io/en/release/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LMDB"),r("OutboundLink")],1),e._v(" database. Because LMDB is memory mapped, it bypasses a lot of the work involved in saving something to disk. The key of the image is set as the timestamp which is provided by LSL. Later, before training, all images are extracted from the LMDB database, converted to PNGs and saved to disk using the timestamp as it's filename, where the training script loads it from during training time. This process results in an approximate top FPS of 50 Hz +- 15 Hz. In order to maintain a steady frame rate, which is necessary for the screen capture process is locked to a maximum of 30 Hz.")]),e._v(" "),r("h4",{attrs:{id:"recorder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recorder"}},[e._v("#")]),e._v(" Recorder")]),e._v(" "),r("p",[e._v("The recorder is the simplest piece of the process, which simply gets the values from each of the other processes via pyLSL and saves them to a CSV file.")]),e._v(" "),r("h4",{attrs:{id:"playback"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#playback"}},[e._v("#")]),e._v(" Playback")]),e._v(" "),r("p",[e._v("Finally, the final piece of tool is the playback functionality, which loads in a trained model, then in a loop reads EEG data and screen information, prepares matching the data preprocessing described below and feeds it into the network to make a prediction. The prediction is then injected into the Input LSL stream, which then controls the virtual controller, flying the drone.")]),e._v(" "),r("h3",{attrs:{id:"data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" Data")]),e._v(" "),r("p",[e._v("The final output from the recording tool is a series of CSVs, one for each run of 30 seconds. Each row contains values for each of the eight channels of EEG data, four values for the recorded controller state (x and y axis for two joysticks) and a timestamp of the screenshot, as well as two additional values for differentiating recordings and runs. An example of the first five values of a CSV is shown below.\n"),r("img",{attrs:{src:a(216),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"preprocessing"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#preprocessing"}},[e._v("#")]),e._v(" Preprocessing")]),e._v(" "),r("p",[e._v("No explicit preprocessing is done on the data. Whereas most papers typically perform at least one data preprocessing step, such as a high pass filter, etc., this project hands of all such processing to the network and expects is to learn those steps. There is some work demonstrating that this method produces better results that traditional preprocessing (Roy, Y., 2019)")]),e._v(" "),r("h3",{attrs:{id:"subsampling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#subsampling"}},[e._v("#")]),e._v(" Subsampling")]),e._v(" "),r("p",[e._v("While the EEG data is polled at the max frequency of 250 Hz from OpenBCI hardware and API, the recorder saves the data at a slightly lower rate of 240 Hz. This allows for subsampling which is a common data augmentation technique as described in [Roy, Y. 2019]. Subsampling was experimented with at various gaming framerates, such as 30 Hz, 60 Hz and 120 Hz by simply using Python slicing notiation (e.g. "),r("code",[e._v("data[::4]")]),e._v(' for 60 Hz). The remaining data is kept as another "recording", allowing for the full usage of the recorded data.')]),e._v(" "),r("p",[r("img",{attrs:{src:a(217),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"rolling-window"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rolling-window"}},[e._v("#")]),e._v(" Rolling Window")]),e._v(" "),r("p",[e._v("A single sample is not enough for a network to make a prediction in a time series environment. As such a sample that is fed into the network is actually a number of sequential samples put together to form a timestep. This number is determined as a percentage of 1 second - i.e. at 60 Hz and 0.25 second size sample will have 15 concurrent timesteps in it. The value 0.25 seconds per training sample was chosen as it is a commonly accepted value of human visual reaction time [CITATION NEEDED] though further experimentation is needed as the subsampled rate decreases, so do the number of samples per timestep. Currently, the overlap window is set to one and further testing of the overlap is required, though there is some evidence to suggest that the highest level of overlap produces better results [CITATION NEEDED]. Because each timestep needs n samples, each run is padded with n - 1 zeros so that Timestep 1 enough samples available to it.")]),e._v(" "),r("p",[r("img",{attrs:{src:a(218),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"gramain-angular-field-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gramain-angular-field-transformation"}},[e._v("#")]),e._v(" Gramain Angular Field Transformation")]),e._v(" "),r("p",[e._v("Input data is all data that is used to make the final prediction. Currently, this includes the timestep, 8 channels of EEG data and the controller input from the previous timestep but could be anytime series data that is relevant to the prediction (for example, eyetracking coordinates or gyro data available via the OpenBCI headset). The depending on the network the may be transformed. In the case of an FNN, the data is not transformed but fed into the network directly. However, it is necessary to transform the series of data into a format that CNN based networks can understand.")]),e._v(" "),r("p",[e._v("There are many options available for this step but Gramian Angular Fields were chosen for this task, as presented in [Wang, Z. 2015] and implemented by "),r("a",{attrs:{href:"https://pyts.readthedocs.io/en/latest/auto_examples/image/plot_gaf.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyTS"),r("OutboundLink")],1),e._v(". Gramain Angular Fields have shown success with CNNs beyond its original paper and are further discussed "),r("a",{attrs:{href:"https://rf5.github.io/2019/04/20/xrd-fastai.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://medium.com/analytics-vidhya/encoding-time-series-as-images-b043becbdbf3",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(". Each column (channel) of data is transformed into a single image, then stacked together to form the input for a CNN. The resulting image is 9 channels so the receiving network must be appropriately adjusted.")]),e._v(" "),r("p",[e._v("The following image shows a GADF transformed timestep with a 0.25 second window of 60 Hz data from a random point with the Virdis colormap. The first image is the timestamp of this timestep and the remaining 8 are channels 1-8 of EEG data.")]),e._v(" "),r("p",[r("img",{attrs:{src:a(219),alt:""}})]),e._v(" "),r("h2",{attrs:{id:"networks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#networks"}},[e._v("#")]),e._v(" Networks")]),e._v(" "),r("p",[e._v("The question of ideal network architecture remains an open question. Several types of networks are being experimented with, including FNNs, CNNs, RNNs and RCNNs, with a variety of hyperparameters. The two most promising network designs are likely to be CNNs or RCNNs, which have shown a great deal of success in the metastudy (Roy Y., 2019). One item that all networks have in common is the CNN architecture. Every network that has a CNN is using a the FastAI implemenation of a ResNet modified as described in the Bag Tricks paper called the "),r("a",{attrs:{href:"https://github.com/fastai/fastai/blob/master/fastai/vision/models/xresnet.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("XResNet"),r("OutboundLink")],1),e._v(". These networks were tested with both the pretrained ResNet from PyTorch as well as the XResNet and the XResNet tended to perform better in every case. This is likely because the encoded date isn't represented in the pretrained ResNet which is trained to look for features for real things as opposed to abstract relationships in images like a GADF transformed data series.")]),e._v(" "),r("h3",{attrs:{id:"cnn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cnn"}},[e._v("#")]),e._v(" CNN")]),e._v(" "),r("p",[e._v("The CNN architecture is composed of three XResNet18s, a concat layer and two fully connected layers with batchnorm and dropout. The three XResNet's correspond to the three pieces of input currently being made available to the network: a multichannel GADF transformed image of the input data, a multichannel frameskipped image of the frames and another multichannel GADF transformed image of the input in prior timesteps.\n"),r("img",{attrs:{src:a(220),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"cnn-with-skip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cnn-with-skip"}},[e._v("#")]),e._v(" CNN with Skip")]),e._v(" "),r("p",[e._v("This architecture is similar to the plain CNN above, however, it adds a skip connection (similar to the residual block of a ResNet) to preserve the context of data after the ResNet step. Testing shows that this method out performs the plain CNN every time at the cost of added complexity (and runtime).\n"),r("img",{attrs:{src:a(221),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"fnn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fnn"}},[e._v("#")]),e._v(" FNN")]),e._v(" "),r("p",[e._v("Because the above CNN with Skip network performed so well, this network does away with the GADF transformation and the associated ResNets, bringing the ResNet count down to one, for the frames stack image. The resulting network out performs the plain CNN network and ties with the CNN with Skip, suggesting that the additional ResNets may not be necessary.\n"),r("img",{attrs:{src:a(222),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"rcnn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rcnn"}},[e._v("#")]),e._v(" RCNN")]),e._v(" "),r("p",[e._v("The RCNN is a hybrid of CNN and RNN networks, which [Roy Y., 2019] shows is growing in popularity and effectiveness. The network takes two XResnets, one for the values and the other for the frames. In this scenario, the previous input is skipped, as this is one of the things the network is expected to and capable of learning due to have an RNN. The outputs from the XResNets are concatenated together and then fed into two GRU layers and then two linear layers. The current design of the network uses two GRU layers. Future considerations include using an AWD-LSTM as well as QRNNs.\n"),r("img",{attrs:{src:a(223),alt:""}})]),e._v(" "),r("h2",{attrs:{id:"training"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#training"}},[e._v("#")]),e._v(" Training")]),e._v(" "),r("p",[e._v("Training is done using FastAI's training loop, which among other things, uses Adam with One Cycle training. No changes or modifications were made to the training process itself - most testing is being done at the recommended "),r("code",[e._v("3e-3")]),e._v(". Changes in learning rate, including with recommendations from FastAI LR Finder did not result in any substantial improvements and in some cases the recommended values resulted in worse performance.")]),e._v(" "),r("h2",{attrs:{id:"future-work-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-work-2"}},[e._v("#")]),e._v(" Future Work")]),e._v(" "),r("ul",[r("li",[e._v("improving data recording stability. The data recording tends to be brittle, especially around OpenBCI, which appears to have random dropped packets and disconnects")]),e._v(" "),r("li",[e._v('refining the "chosen" network architecture. Currently, several network architectures are being experimented with, including FNNs, CNNs, RNNs, and RCNNs. Some of these perform significantly better than others during training time, however none yet have achieved performance good enough to be considered the best design.')]),e._v(" "),r("li",[e._v("taking further neuroscience research into considering")]),e._v(" "),r("li",[e._v("incorporating reinforcement learning (likely the Actor-Critic model)")])]),e._v(" "),r("h2",{attrs:{id:"citations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#citations"}},[e._v("#")]),e._v(" Citations")]),e._v(" "),r("p",[e._v("[1] Roy, Y., Banville, H., Albuquerque, I., Gramfort, A., Falk, T. H., & Faubert, J. (2019, August 14). Deep learning-based electroencephalography analysis: a systematic review. Journal of Neural Engineering. Retrieved from https://iopscience.iop.org/article/10.1088/1741-2552/ab260c")]),e._v(" "),r("p",[e._v("[2] Basmajian, J. V. (1963). Control and Training of Individual Motor Units. Science, 141(3579), 440–441. doi: 10.1126/science.141.3579.440. Retrieved from https://science.sciencemag.org/content/141/3579/440")]),e._v(" "),r("p",[e._v("[3] Mnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D., & Riedmiller, M. (2013). Playing atari with deep reinforcement learning. arXiv preprint arXiv:1312.5602. Retrieved from https://arxiv.org/abs/1312.5602")]),e._v(" "),r("p",[e._v("[4] Wang, Z., & Oates, T. (2015, June). Imaging time-series to improve classification and imputation. In Twenty-Fourth International Joint Conference on Artificial Intelligence. Retrieved from https://www.aaai.org/ocs/index.php/IJCAI/IJCAI15/paper/viewPaper/11082")]),e._v(" "),r("p",[e._v("[5] He, T., Zhang, Z., Zhang, H., Zhang, Z., Xie, J., & Li, M. (2019). Bag of tricks for image classification with convolutional neural networks. Retrieved from https://arxiv.org/abs/1607.01759")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);